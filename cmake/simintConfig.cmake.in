# simintConfig.cmake
# ------------------
#
# SIMINT cmake module.
# This module sets the following variables in your project::
#
#   simint_FOUND - true if simint and all required components found on the system
#   simint_VERSION - simint version in format Major.Minor.Release
#   simint_INCLUDE_DIRS - Directory where simint headers are located.
#   simint_INCLUDE_DIR - same as DIRS
#   simint_DEFINITIONS - Definitions necessary to use simint, namely USING_simint.
#   simint_LIBRARIES - simint library to link against.
#   simint_LIBRARY - same as LIBRARIES
#
#
# Available components: shared static ::
#
#   shared - search for only shared library
#   static - search for only static library
#
#
# Exported targets::
#
# If simint is found, this module defines the following :prop_tgt:`IMPORTED`
# target. Target is shared _or_ static, so, for both, use separate, not
# overlapping, installations. ::
#
#   simint::simint - the main simint library with header & defs attached.
#
#
# Suggested usage::
#
#   find_package(simint)
#   find_package(simint 0.7 EXACT CONFIG REQUIRED COMPONENTS shared)
#
#
# The following variables can be set to guide the search for this package::
#
#   simint_DIR - CMake variable, set to directory containing this Config file
#   CMAKE_PREFIX_PATH - CMake variable, set to root directory of this package
#   PATH - environment variable, set to bin directory of this package
#   CMAKE_DISABLE_FIND_PACKAGE_simint - CMake variable, disables
#     find_package(simint) when not REQUIRED, perhaps to force internal build

@PACKAGE_INIT@

set(PN simint)
set (_valid_components
    static
    shared
)

# find includes: simint/simint.h
set(${PN}_INCLUDE_DIR "${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_INCLUDEDIR@")
set(${PN}_INCLUDE_DIRS ${${PN}_INCLUDE_DIR})

# find library: shared, static, or whichever
if(@BUILD_SHARED_LIBS@)
    set(${PN}_LIBRARY "${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_LIBDIR@/lib${PN}${CMAKE_SHARED_LIBRARY_SUFFIX}")
    set(${PN}_shared_FOUND 1)
else()
    set(${PN}_LIBRARY "${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_LIBDIR@/lib${PN}${CMAKE_STATIC_LIBRARY_SUFFIX}")
    set(${PN}_static_FOUND 1)
endif()
set(${PN}_LIBRARIES ${${PN}_LIBRARY})
set(${PN}_DEFINITIONS USING_${PN})

check_required_components(${PN})

#-----------------------------------------------------------------------------
# Don't include targets if this file is being picked up by another
# project which has already built this as a subproject
#-----------------------------------------------------------------------------
if(NOT TARGET ${PN}::simint)
    include("${CMAKE_CURRENT_LIST_DIR}/${PN}Targets.cmake")
endif()

